import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Play, 
  Pause, 
  Shuffle, 
  Heart, 
  Share2, 
  Download, 
  MoreHorizontal,
  RefreshCw,
  Sparkles,
  ThumbsUp,
  ThumbsDown,
  Replace,
  Save,
  Music,
  Clock,
  Zap,
  Info
} from 'lucide-react';
import { GeneratedPlaylist as PlaylistType } from '../../services/aiPlaylistService';
import { usePlayerStore } from '../../stores/playerStore';
import { useAIPlaylist } from '../../hooks/useAIPlaylist';
import { GlassCard } from '../ui/GlassCard';
import { NeonButton } from '../ui/NeonButton';
import { SongCard } from '../ui/SongCard';
import { useToast } from '../../hooks/useToast';

interface GeneratedPlaylistProps {
  playlist: PlaylistType;
  onRegenerate: () => void;
  onSave?: (playlist: PlaylistType) => void;
  className?: string;
}

export const GeneratedPlaylist: React.FC<GeneratedPlaylistProps> = ({
  playlist,
  onRegenerate,
  onSave,
  className = '',
}) => {
  const [likedTracks, setLikedTracks] = useState<string[]>([]);
  const [dislikedTracks, setDislikedTracks] = useState<string[]>([]);
  const [showFeedback, setShowFeedback] = useState(false);
  const [replacingTrackIndex, setReplacingTrackIndex] = useState<number | null>(null);

  const { setCurrentTrack, setIsPlaying, setQueue } = usePlayerStore();
  const { regeneratePlaylist, replaceSingleTrack, createRequestFromUserData } = useAIPlaylist();
  const { showToast } = useToast();

  const formatDuration = (seconds: number) => {
    const hours = Math.floor(seconds / 3600);
    const mins = Math.floor((seconds % 3600) / 60);
    
    if (hours > 0) {
      return `${hours}h ${mins}m`;
    }
    return `${mins}m`;
  };

  const handlePlayAll = () => {
    if (playlist.tracks.length > 0) {
      const validTracks = playlist.tracks.filter(track => track.audio_url);
      if (validTracks.length > 0) {
        setQueue(validTracks);
        setCurrentTrack(validTracks[0]);
        setIsPlaying(true);
        showToast(`Playing "${playlist.name}"`, 'success');
      } else {
        showToast('No playable tracks found in this playlist', 'warning');
      }
    }
  };

  const handleShuffle = () => {
    const validTracks = playlist.tracks.filter(track => track.audio_url);
    if (validTracks.length > 0) {
      const shuffled = [...validTracks].sort(() => Math.random() - 0.5);
      setQueue(shuffled);
      setCurrentTrack(shuffled[0]);
      setIsPlaying(true);
      showToast('Shuffle mode enabled', 'success');
    }
  };

  const handleTrackLike = (trackId: string) => {
    setLikedTracks(prev => 
      prev.includes(trackId) 
        ? prev.filter(id => id !== trackId)
        : [...prev, trackId]
    );
    setDislikedTracks(prev => prev.filter(id => id !== trackId));
  };

  const handleTrackDislike = (trackId: string) => {
    setDislikedTracks(prev => 
      prev.includes(trackId) 
        ? prev.filter(id => id !== trackId)
        : [...prev, trackId]
    );
    setLikedTracks(prev => prev.filter(id => id !== trackId));
  };

  const handleReplaceTrack = async (index: number) => {
    setReplacingTrackIndex(index);
    try {
      const originalRequest = createRequestFromUserData();
      await replaceSingleTrack(playlist, index, originalRequest);
      showToast('Track replaced successfully!', 'success');
    } catch (error) {
      showToast('Failed to replace track', 'error');
    } finally {
      setReplacingTrackIndex(null);
    }
  };

  const handleRegenerateWithFeedback = async () => {
    try {
      const originalRequest = createRequestFromUserData();
      const feedback = {
        likedTracks: likedTracks.map(id => {
          const track = playlist.tracks.find(t => t.id === id);
          return track ? `${track.title} by ${track.artist}` : '';
        }).filter(Boolean),
        dislikedTracks: dislikedTracks.map(id => {
          const track = playlist.tracks.find(t => t.id === id);
          return track ? `${track.title} by ${track.artist}` : '';
        }).filter(Boolean),
      };
      
      await regeneratePlaylist(originalRequest, feedback);
      showToast('Playlist regenerated with your feedback!', 'success');
    } catch (error) {
      showToast('Failed to regenerate playlist', 'error');
    }
  };

  const handleShare = async () => {
    try {
      await navigator.share({
        title: playlist.name,
        text: `Check out this AI-generated playlist: ${playlist.description}`,
        url: window.location.href,
      });
    } catch (error) {
      // Fallback to clipboard
      const shareText = `ðŸŽµ ${playlist.name}\n\n${playlist.description}\n\nGenerated by NeuroBeats AI`;
      navigator.clipboard.writeText(shareText);
      showToast('Playlist details copied to clipboard!', 'success');
    }
  };

  const getEnergyColor = (energy: number) => {
    if (energy >= 8) return 'text-red-400';
    if (energy >= 6) return 'text-orange-400';
    if (energy >= 4) return 'text-yellow-400';
    return 'text-green-400';
  };

  const getEnergyLabel = (energy: number) => {
    if (energy >= 8) return 'High Energy';
    if (energy >= 6) return 'Medium Energy';
    if (energy >= 4) return 'Moderate';
    return 'Chill';
  };

  return (
    <div className={`space-y-6 ${className}`}>
      {/* Playlist Header */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6 }}
      >
        <GlassCard className="p-8 bg-neon-gradient">
          <div className="flex items-start justify-between mb-6">
            <div className="flex-1">
              <div className="flex items-center space-x-3 mb-2">
                <Sparkles className="w-6 h-6 text-white" />
                <span className="text-white/80 font-medium">AI Generated</span>
              </div>
              <h1 className="text-4xl font-space font-bold text-white mb-3">
                {playlist.name}
              </h1>
              <p className="text-xl text-white/80 mb-4">
                {playlist.description}
              </p>
              
              {/* Playlist Stats */}
              <div className="flex items-center space-x-6 text-white/90">
                <div className="flex items-center space-x-2">
                  <Music className="w-5 h-5" />
                  <span>{playlist.tracks.length} tracks</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Clock className="w-5 h-5" />
                  <span>{formatDuration(playlist.totalDuration)}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <Zap className={`w-5 h-5 ${getEnergyColor(playlist.averageEnergy)}`} />
                  <span>{getEnergyLabel(playlist.averageEnergy)}</span>
                </div>
              </div>
            </div>
            
            <div className="hidden md:block">
              <div className="w-32 h-32 bg-white/20 rounded-full animate-pulse-slow" />
            </div>
          </div>

          {/* Action Buttons */}
          <div className="flex flex-wrap items-center gap-4">
            <NeonButton
              variant="secondary"
              size="lg"
              onClick={handlePlayAll}
              className="bg-white/20 text-white border-white/30 hover:bg-white/30"
            >
              <Play className="w-5 h-5 mr-2" />
              Play All
            </NeonButton>

            <NeonButton
              variant="ghost"
              onClick={handleShuffle}
              className="text-white border-white/30 hover:bg-white/20"
            >
              <Shuffle className="w-5 h-5 mr-2" />
              Shuffle
            </NeonButton>

            <NeonButton
              variant="ghost"
              onClick={onRegenerate}
              className="text-white border-white/30 hover:bg-white/20"
            >
              <RefreshCw className="w-5 h-5 mr-2" />
              Regenerate
            </NeonButton>

            {onSave && (
              <NeonButton
                variant="ghost"
                onClick={() => onSave(playlist)}
                className="text-white border-white/30 hover:bg-white/20"
              >
                <Save className="w-5 h-5 mr-2" />
                Save
              </NeonButton>
            )}

            <NeonButton
              variant="ghost"
              onClick={handleShare}
              className="text-white border-white/30 hover:bg-white/20"
            >
              <Share2 className="w-5 h-5 mr-2" />
              Share
            </NeonButton>

            <NeonButton
              variant="ghost"
              onClick={() => setShowFeedback(!showFeedback)}
              className="text-white border-white/30 hover:bg-white/20"
            >
              <ThumbsUp className="w-5 h-5 mr-2" />
              Feedback
            </NeonButton>
          </div>
        </GlassCard>
      </motion.div>

      {/* Feedback Panel */}
      <AnimatePresence>
        {showFeedback && (
          <motion.div
            initial={{ opacity: 0, height: 0 }}
            animate={{ opacity: 1, height: 'auto' }}
            exit={{ opacity: 0, height: 0 }}
            transition={{ duration: 0.3 }}
          >
            <GlassCard className="p-6">
              <h3 className="text-xl font-space font-bold text-white mb-4">
                Help Improve Your Recommendations
              </h3>
              <p className="text-gray-300 mb-4">
                Like or dislike tracks to help our AI learn your preferences better.
              </p>
              
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <ThumbsUp className="w-5 h-5 text-green-400" />
                  <span className="text-white">{likedTracks.length} liked</span>
                </div>
                <div className="flex items-center space-x-2">
                  <ThumbsDown className="w-5 h-5 text-red-400" />
                  <span className="text-white">{dislikedTracks.length} disliked</span>
                </div>
                
                {(likedTracks.length > 0 || dislikedTracks.length > 0) && (
                  <NeonButton
                    variant="primary"
                    size="sm"
                    onClick={handleRegenerateWithFeedback}
                  >
                    <RefreshCw className="w-4 h-4 mr-2" />
                    Regenerate with Feedback
                  </NeonButton>
                )}
              </div>
            </GlassCard>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Tracks List */}
      <motion.div
        initial={{ opacity: 0, y: 30 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.6, delay: 0.2 }}
      >
        <GlassCard className="p-6">
          <h2 className="text-2xl font-space font-bold text-white mb-6">
            Tracks
          </h2>
          
          <div className="space-y-2">
            {playlist.tracks.map((track, index) => (
              <motion.div
                key={track.id}
                initial={{ opacity: 0, x: -20 }}
                animate={{ opacity: 1, x: 0 }}
                transition={{ duration: 0.3, delay: index * 0.05 }}
                className="group relative"
              >
                <div className="flex items-center space-x-4 p-4 rounded-lg hover:bg-white/5 transition-colors">
                  {/* Track Number */}
                  <div className="w-8 text-center">
                    <span className="text-gray-400 text-sm font-mono">
                      {(index + 1).toString().padStart(2, '0')}
                    </span>
                  </div>

                  {/* Track Info */}
                  <div className="flex-1">
                    <SongCard
                      song={track}
                      variant="list"
                      className="bg-transparent border-none p-0"
                    />
                  </div>

                  {/* AI Info */}
                  {track.aiRecommended && (
                    <div className="flex items-center space-x-2">
                      <div className={`w-2 h-2 rounded-full ${getEnergyColor(track.energy || 5)}`} />
                      <span className="text-xs text-gray-400">
                        Energy: {track.energy}/10
                      </span>
                    </div>
                  )}

                  {/* Track Actions */}
                  <div className="flex items-center space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                    {showFeedback && (
                      <>
                        <motion.button
                          className={`p-2 rounded-lg transition-colors ${
                            likedTracks.includes(track.id)
                              ? 'bg-green-500 text-white'
                              : 'text-gray-400 hover:text-green-400 hover:bg-green-400/20'
                          }`}
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleTrackLike(track.id)}
                        >
                          <ThumbsUp className="w-4 h-4" />
                        </motion.button>

                        <motion.button
                          className={`p-2 rounded-lg transition-colors ${
                            dislikedTracks.includes(track.id)
                              ? 'bg-red-500 text-white'
                              : 'text-gray-400 hover:text-red-400 hover:bg-red-400/20'
                          }`}
                          whileHover={{ scale: 1.1 }}
                          whileTap={{ scale: 0.9 }}
                          onClick={() => handleTrackDislike(track.id)}
                        >
                          <ThumbsDown className="w-4 h-4" />
                        </motion.button>
                      </>
                    )}

                    <motion.button
                      className="p-2 text-gray-400 hover:text-white hover:bg-white/10 rounded-lg transition-colors"
                      whileHover={{ scale: 1.1 }}
                      whileTap={{ scale: 0.9 }}
                      onClick={() => handleReplaceTrack(index)}
                      disabled={replacingTrackIndex === index}
                    >
                      {replacingTrackIndex === index ? (
                        <RefreshCw className="w-4 h-4 animate-spin" />
                      ) : (
                        <Replace className="w-4 h-4" />
                      )}
                    </motion.button>

                    {track.reasoning && (
                      <motion.button
                        className="p-2 text-gray-400 hover:text-neon-purple hover:bg-neon-purple/20 rounded-lg transition-colors"
                        whileHover={{ scale: 1.1 }}
                        whileTap={{ scale: 0.9 }}
                        title={track.reasoning}
                      >
                        <Info className="w-4 h-4" />
                      </motion.button>
                    )}
                  </div>
                </div>

                {/* AI Reasoning Tooltip */}
                {track.reasoning && (
                  <div className="absolute right-0 top-full mt-2 w-64 p-3 bg-dark-300 border border-white/20 rounded-lg text-sm text-gray-300 opacity-0 group-hover:opacity-100 transition-opacity z-10 pointer-events-none">
                    <div className="flex items-start space-x-2">
                      <Sparkles className="w-4 h-4 text-neon-purple mt-0.5 flex-shrink-0" />
                      <p>{track.reasoning}</p>
                    </div>
                  </div>
                )}
              </motion.div>
            ))}
          </div>
        </GlassCard>
      </motion.div>
    </div>
  );
};